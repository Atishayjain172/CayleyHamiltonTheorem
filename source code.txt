#include <stdio.h>
#include <stdlib.h>

int main()
{
    int i,x,z,sum=0;
    int a[3][3],b[3],c[3],d[3],e[3],tempa[3],m,tempb[3];
    int cua[3][3],sqa[3][3];
    int thi[3][3],fou[3][3],finalm[3][3];
    int iden[3][3] = {{1,0,0},{0,1,0},{0,0,1}};
    printf("enter 3*3 matrix \n");
    for(i=0;i<3;i++)
        for(x=0;x<3;x++)
        scanf("%d",&a[i][x]);

    printf("\n\n considering lemda as A and diagonally applying it to given matrix \n");
    for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          (i==x)? (printf("%d-A \t",a[i][x])):(printf("%d \t",a[i][x]));

        }
        printf("\n");
    }
    printf("\n\n");
    c[2] = (a[1][1]*a[2][2]) - (a[2][1]*a[1][2]);
    c[0] = 1;
    c[1] = (a[1][1]*-1) + (a[2][2]*-1);
    d[2] = (a[1][0]*a[2][2]) - (a[1][2]*a[2][0]);
    d[1] = a[1][0]*-1;
    e[2] = (a[1][0]*a[2][1]) - (a[1][1]*a[2][0]);
    e[1] = a[2][0];
    m = c[0]*-1;
    for(i=1;i<3;i++)
    {
        tempb[i] = c[i]*-1;
    }


    for(i=0;i<3;i++)
    {
        tempa[i] = a[0][0]*c[i];
    }
    c[0]= tempa[0]+tempb[1];
    c[1]= tempa[1]+tempb[2];
    c[2]= a[0][0]*c[2];
    d[1]= (-1*a[0][1])*d[1];
    d[2]= (-1*a[0][1])*d[2];
    e[1]= a[0][2]*e[1];
    e[2]= a[0][2]*e[2];
    b[1]= c[1]+d[1]+e[1];
    b[2]= c[2]+d[2]+e[2];
    printf("\n After solving the matrix according to caley hamilton theorem we get equation as:\n");
    printf(" %dA(3))+(%dA(2))+(%dA)+(%d)+(%dA)+(%d)+(%dA)+(%d)",m,c[0],c[1],c[2],d[1],d[2],e[1],e[2]);
    printf("\n\n By further solving the equation we get another eqaution as:\n ");
    printf("\n %dA(3)+(%dA(2))+(%dA)+(%dI)\n",m,c[0],b[1],b[2]);

    for (i = 0; i < 3; i++)
    {
      for (x = 0; x < 3; x++)
       {
        for (z = 0; z < 3; z++)
         {
          sum = sum + a[i][z]*a[z][x];
        }

        sqa[i][x] = sum;
        sum = 0;
      }
    }
    for (i = 0; i < 3; i++)
    {
      for (x = 0; x < 3; x++)
       {
        for (z = 0; z < 3; z++)
         {
          sum = sum + sqa[i][z]*a[z][x];
        }

        cua[i][x] = sum;
        sum = 0;
      }
    }
 for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          cua[i][x] = m*cua[i][x];

        }
    }
    for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          sqa[i][x] = c[0]*sqa[i][x];

        }
    }

    for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          thi[i][x] = b[1]*a[i][x];

        }
    }

     for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          fou[i][x] = b[2]*iden[i][x];

        }
    }


    printf("\n:::::::::::::::::::::::::::::::::::::\n");
    printf("%d*A(3)::\n\n",m);
     for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          printf("%d \t",cua[i][x]);

        }
        printf("\n");
    }


    printf("\n:::::::::::::::::::::::::::::::::::::\n");
    printf("%d*A(2)::\n\n",c[0]);
     for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          printf("%d \t",sqa[i][x]);

        }
        printf("\n");
    }

    printf("\n:::::::::::::::::::::::::::::::::::::\n");
    printf("%d*A::\n\n",b[1]);
     for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          printf("%d \t",thi[i][x]);

        }
        printf("\n");
    }

    printf("\n:::::::::::::::::::::::::::::::::::::\n");
    printf("%d*I::\n\n",b[2]);
     for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          printf("%d \t",fou[i][x]);

        }
        printf("\n");
    }

    for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
         finalm[i][x] = cua[i][x]+sqa[i][x]+thi[i][x]+fou[i][x];

        }
    }
    printf("\n:::::::::::::::::::::::::::::::::::::\n");
    printf("final matrix after putting all the matrix values into equation \n\n");
     for(i=0;i<3;i++)
    {
        for(x=0;x<3;x++)
        {
          printf("%d \t",finalm[i][x]);

        }
        printf("\n");
    }


    if(finalm[0][0]==0&&finalm[0][1]==0&&finalm[0][2]==0&&finalm[1][0]==0&&finalm[1][1]==0&&finalm[1][2]==0&&finalm[2][0]==0&&finalm[2][1]==0&&finalm[2][2]==0)
    {
        printf("It satisfies cayley hamilton theorem");
    }
    else
    {
        printf("It doesnot satisfies cayley hamilton theorem");
    }

return 0;
}
